blueprint:
  name: LightEase - Bezier Curve Control
  description: "Control dimmable lights using a Bezier curve with a dimmer input."
  domain: automation
  input:
    control_device:
      name: Control Device
      description: "The dimmer input device."
      selector:
        entity:
          domain: input_number

    controlled_lights:
      name: Lights to Control
      description: Select the lights to adjust based on the Bezier curve.
      selector:
        entity:
          domain: light
          multiple: true

    bezier_preset:
      name: Bezier Curve Preset
      description: Select a preset curve or choose "Custom" to define your own.
      selector:
        select:
          options:
            - "Ease In"
            - "Ease Out"
            - "Ease In-Out"
            - "Linear"
            - "Custom"

    bezier_x1:
      name: Bezier X1 (Control Point 1)
      description: Adjust the X1 value (0-1).
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

    bezier_y1:
      name: Bezier Y1 (Control Point 1)
      description: Adjust the Y1 value (0-1).
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

    bezier_x2:
      name: Bezier X2 (Control Point 2)
      description: Adjust the X2 value (0-1).
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

    bezier_y2:
      name: Bezier Y2 (Control Point 2)
      description: Adjust the Y2 value (0-1).
      selector:
        number:
          min: 0
          max: 1
          step: 0.01
          mode: slider

    custom_bezier:
      name: Custom Bezier Curve (Advanced)
      description: Enter a custom bezier curve in the format [x1, y1, x2, y2].
      default: "[0.42, 0, 0.58, 1]"
      selector:
        text:
          multiline: false

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input control_device

action:
  - variables:
      brightness_input: "{{ states[trigger.entity_id].state | float(0) }}"
      bezier_values: >
        {% if is_state('input_bezier_preset', 'Ease In') %}
          [0.42, 0, 1, 1]
        {% elif is_state('input_bezier_preset', 'Ease Out') %}
          [0, 0, 0.58, 1]
        {% elif is_state('input_bezier_preset', 'Ease In-Out') %}
          [0.42, 0, 0.58, 1]
        {% elif is_state('input_bezier_preset', 'Linear') %}
          [0, 0, 1, 1]
        {% else %}
          {{ input_custom_bezier | from_json }}
        {% endif %}
      x1: "{{ bezier_values[0] | float(0) }}"
      y1: "{{ bezier_values[1] | float(0) }}"
      x2: "{{ bezier_values[2] | float(0) }}"
      y2: "{{ bezier_values[3] | float(0) }}"

  - service: logbook.log
    data:
      name: "Bezier Curve Debug"
      message: "Bezier applied with control points [{{ x1 }}, {{ y1 }}, {{ x2 }}, {{ y2 }}] and input brightness {{ brightness_input }}."

  - repeat:
      for_each: !input controlled_lights
      sequence:
        - service: light.turn_on
          target:
            entity_id: "{{ repeat.item }}"
          data:
            brightness_pct: >
              {{ ((1 - ((1 - brightness_input / 100) ** 3)) * 100) | int }}
